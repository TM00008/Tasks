install.packages("swirl")
install.packages("swirl")
library(swirl)
inst
| Hi! Type swirl() when you are ready to begin.
library (swirl)
library(swirl)
install.packages(swirl)
install.packages("swirl")
library(swirl)
swirl()
3
1
swirl()
5+7
x <- 5+7
x
y <- x-3
y
c(1.1,9,3.14)
c(1.1, 9, 3.14)
z <- c(1.1,9,3.14)
?c
z
z <- c(555)
c(z,555,z)
z*z+100
z*2+100
my_sqrt z-1
sqrt(z-1)
sqrt(z-1)
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
library(swirl)
library (swirl)
swirl()
5+7
x <- 5+7
x
y <- x-3
y
c(1.1,9,3.14)
c(1.1,9,3.14)
z <- c(1.1,9,3.14)
c
?c
z
c(z,555,z)
z*2+100
sqrt(z-1)
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
c(1,2,3,4)+c(0,10,1000)
z*2+1000
my_div
swirl()
5+7
x <- 5+7
x
y <- x-3
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4,)+c(0,10,100)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
library (swirl)
swirl()
0
0
info()
main()
# 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
library(pkg)
# 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
library(swirl)
# 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
library (swirl)
# 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
library (swirl)
# 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
library (swirl)
swirl ()
getwd()
info()
main()
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args()
args(list.files)
old.dir <- getwd()
dir.create(testdir)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info(mytest.R)
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
fie.copy("mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"), recursive=TRUE
dir.create(file.path("testdir2", "testdir3"))
dir.create(file.path("testdir2", "testdir3"))
dir.create(file.path('testdir2', 'testdir3'), recursive=TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?':'
seq(1,20)
seq(0,10, by 0.5)
seq(0,10, by=0.5)
seq(5,10, length=30)
my_seq <- seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect <- 0.5,55,-10,6
num_vect <- (0.5,55,-10,6)
num_vect <- (0.5,55,-10,6)
num_vect <- (0.5,55,-10,6)
num.vect(0.5,55,-10,6)
vector(0.5,55,-10,6)
num_vect <- c(0.5,55,-10,6)
tf=(num_vect<1)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
past(my_char, collapse = "")
paste(my_char, collapse = "")
paste(my_char, collapse = " ")
my_name <- c(my_char, "Tyler")
my_name
paste(my_char, collapse = " ")
paste(my_name, collapse = " ")
paste("Hello", "world!", sep= " ")
paste("vector 1:3", c("X", "Y", "Z"), sep= " ")
paste(1:3, c("X", "Y", "Z"), sep= " ")
paste(1:3, c("X", "Y", "Z"), sep= " ")
paste(1:3, c("X", "Y", "Z"), sep= " ")
paste(1:3, c("X", "Y", "Z"), sep= "")
paste(LETTERS, 1:4, sep= "-")
x <- c(44,NA,5,NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
c(x[3], x[5], x[7])
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11, bar=2, narf=NA)
vect <- c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(1:20, nrow=4, ncol=5, byrow=FALSE)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5 != 7
5 !TRUE 7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5>8 || 6 != 8 && 4>3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
submit()
submit()
submit()
submit()
boring_function('My first function!')
boring_function
submit()
submit()
submit()
submit()
mean(c(4,5,10))
my_mean(c(4,5,10))
submit()
submit()
submit()
submit()
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11, num=5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(c(1.4,3.6,7.9,8.8))
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram(c("Hello"))
submit()
mad_libs(place="Savannah", adjective= "lovely", noun= "person")
submit()
submit()
"I" %p% "love" %p% "R!"
data(cars)
?data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$dist, y=cars$speed)
plot(x=cars$speed, y=cars$dist)
plot(x=cars$dist, y=cars$speed)
plot(x=cars$speed, y=cars$dist, xlab=Speed)
plot(x=cars$speed, y=cars$dist, xlab="Speed")
plot(x=cars$speed, y=cars$dist, ylab= "Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab= "Stopping Distance")
plot(cars, main= "My Plot")
plot(cars, sub= "My Plot Subtitle")
plots(cars, col=2)
plot(cars, col=2)
plot(cars, xlim= c(10,15))
plot(cars, pch=2)
data(mtcars)
?boxplot
boxplot(mpg~ cyl, data=mtcars)
hist(mtcars$mpg)
